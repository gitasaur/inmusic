// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v5.28.2
// source: in_music_api.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "in_music_api";

export interface Profile {
  id: number;
  email: string;
  firstname: string;
  lastname: string;
  productRegistrations: ProductRegistration[];
}

export interface CreateProfileRequest {
  email: string;
  firstname: string;
  lastname: string;
}

export interface UpdateProfileRequest {
  id: number;
  email: string;
  firstname: string;
  lastname: string;
}

export interface ProfileByIdRequest {
  id: number;
}

export interface ProfilesList {
  profiles: Profile[];
}

export interface ProductRegistration {
  id: number;
  productId: number;
  profileId: number;
  purchaseDate: string;
  expiryAt: string;
  serialCode: string;
  profile: Profile | undefined;
  product: Product | undefined;
}

export interface ProductRegistrationList {
  productRegistrations: ProductRegistration[];
}

export interface CreateProductRegistrationRequest {
  profileId: number;
  productId: number;
  purchaseDate: string;
  expiryAt: string;
  serialCode: string;
}

export interface UpdateProductRegistrationRequest {
  id: number;
  purchaseDate: string;
  expiryAt: string;
  serialCode: string;
}

export interface ProductRegistrationByIdRequest {
  id: number;
  profileId?: number | undefined;
}

export interface ProductRegistrationByProfileRequest {
  profileId: number;
}

export interface CreateProductBundleRequest {
  mainProductId: number;
  bundledProductId: number;
}

export interface UpdateProductBundleRequest {
  id: number;
  mainProductId: number;
  bundledProductId: number;
}

export interface FindProductBundleByIdRequest {
  id: number;
}

export interface RemoveProductBundleRequest {
  id: number;
}

export interface ProductBundleResponse {
  id: number;
  mainProductId: number;
  bundledProductId: number;
}

export interface ProductBundlesList {
  bundles: ProductBundleResponse[];
}

export interface CreateProductRequest {
  SKU: string;
  name: string;
}

export interface UpdateProductRequest {
  id: number;
  SKU: string;
  name: string;
}

export interface FindProductByIdRequest {
  id: number;
}

export interface RemoveProductRequest {
  id: number;
}

export interface Product {
  id: number;
  SKU: string;
  name: string;
}

export interface ProductsList {
  products: Product[];
}

/**
 * ------
 * Common
 * ------
 */
export interface Empty {
}

function createBaseProfile(): Profile {
  return { id: 0, email: "", firstname: "", lastname: "", productRegistrations: [] };
}

export const Profile: MessageFns<Profile> = {
  encode(message: Profile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.firstname !== "") {
      writer.uint32(26).string(message.firstname);
    }
    if (message.lastname !== "") {
      writer.uint32(34).string(message.lastname);
    }
    for (const v of message.productRegistrations) {
      ProductRegistration.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Profile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastname = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productRegistrations.push(ProductRegistration.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Profile {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      firstname: isSet(object.firstname) ? globalThis.String(object.firstname) : "",
      lastname: isSet(object.lastname) ? globalThis.String(object.lastname) : "",
      productRegistrations: globalThis.Array.isArray(object?.productRegistrations)
        ? object.productRegistrations.map((e: any) => ProductRegistration.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.firstname !== "") {
      obj.firstname = message.firstname;
    }
    if (message.lastname !== "") {
      obj.lastname = message.lastname;
    }
    if (message.productRegistrations?.length) {
      obj.productRegistrations = message.productRegistrations.map((e) => ProductRegistration.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Profile>, I>>(base?: I): Profile {
    return Profile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Profile>, I>>(object: I): Profile {
    const message = createBaseProfile();
    message.id = object.id ?? 0;
    message.email = object.email ?? "";
    message.firstname = object.firstname ?? "";
    message.lastname = object.lastname ?? "";
    message.productRegistrations = object.productRegistrations?.map((e) => ProductRegistration.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateProfileRequest(): CreateProfileRequest {
  return { email: "", firstname: "", lastname: "" };
}

export const CreateProfileRequest: MessageFns<CreateProfileRequest> = {
  encode(message: CreateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.firstname !== "") {
      writer.uint32(18).string(message.firstname);
    }
    if (message.lastname !== "") {
      writer.uint32(26).string(message.lastname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstname = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProfileRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      firstname: isSet(object.firstname) ? globalThis.String(object.firstname) : "",
      lastname: isSet(object.lastname) ? globalThis.String(object.lastname) : "",
    };
  },

  toJSON(message: CreateProfileRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.firstname !== "") {
      obj.firstname = message.firstname;
    }
    if (message.lastname !== "") {
      obj.lastname = message.lastname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProfileRequest>, I>>(base?: I): CreateProfileRequest {
    return CreateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProfileRequest>, I>>(object: I): CreateProfileRequest {
    const message = createBaseCreateProfileRequest();
    message.email = object.email ?? "";
    message.firstname = object.firstname ?? "";
    message.lastname = object.lastname ?? "";
    return message;
  },
};

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return { id: 0, email: "", firstname: "", lastname: "" };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest> = {
  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.firstname !== "") {
      writer.uint32(26).string(message.firstname);
    }
    if (message.lastname !== "") {
      writer.uint32(34).string(message.lastname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      firstname: isSet(object.firstname) ? globalThis.String(object.firstname) : "",
      lastname: isSet(object.lastname) ? globalThis.String(object.lastname) : "",
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.firstname !== "") {
      obj.firstname = message.firstname;
    }
    if (message.lastname !== "") {
      obj.lastname = message.lastname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(base?: I): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(object: I): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.id = object.id ?? 0;
    message.email = object.email ?? "";
    message.firstname = object.firstname ?? "";
    message.lastname = object.lastname ?? "";
    return message;
  },
};

function createBaseProfileByIdRequest(): ProfileByIdRequest {
  return { id: 0 };
}

export const ProfileByIdRequest: MessageFns<ProfileByIdRequest> = {
  encode(message: ProfileByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: ProfileByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileByIdRequest>, I>>(base?: I): ProfileByIdRequest {
    return ProfileByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileByIdRequest>, I>>(object: I): ProfileByIdRequest {
    const message = createBaseProfileByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseProfilesList(): ProfilesList {
  return { profiles: [] };
}

export const ProfilesList: MessageFns<ProfilesList> = {
  encode(message: ProfilesList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      Profile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfilesList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfilesList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(Profile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfilesList {
    return {
      profiles: globalThis.Array.isArray(object?.profiles) ? object.profiles.map((e: any) => Profile.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProfilesList): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => Profile.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfilesList>, I>>(base?: I): ProfilesList {
    return ProfilesList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfilesList>, I>>(object: I): ProfilesList {
    const message = createBaseProfilesList();
    message.profiles = object.profiles?.map((e) => Profile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProductRegistration(): ProductRegistration {
  return {
    id: 0,
    productId: 0,
    profileId: 0,
    purchaseDate: "",
    expiryAt: "",
    serialCode: "",
    profile: undefined,
    product: undefined,
  };
}

export const ProductRegistration: MessageFns<ProductRegistration> = {
  encode(message: ProductRegistration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.productId !== 0) {
      writer.uint32(16).int32(message.productId);
    }
    if (message.profileId !== 0) {
      writer.uint32(24).int32(message.profileId);
    }
    if (message.purchaseDate !== "") {
      writer.uint32(34).string(message.purchaseDate);
    }
    if (message.expiryAt !== "") {
      writer.uint32(42).string(message.expiryAt);
    }
    if (message.serialCode !== "") {
      writer.uint32(50).string(message.serialCode);
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(58).fork()).join();
    }
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductRegistration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.productId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.profileId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.purchaseDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expiryAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.serialCode = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductRegistration {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      productId: isSet(object.productId) ? globalThis.Number(object.productId) : 0,
      profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : 0,
      purchaseDate: isSet(object.purchaseDate) ? globalThis.String(object.purchaseDate) : "",
      expiryAt: isSet(object.expiryAt) ? globalThis.String(object.expiryAt) : "",
      serialCode: isSet(object.serialCode) ? globalThis.String(object.serialCode) : "",
      profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
    };
  },

  toJSON(message: ProductRegistration): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.productId !== 0) {
      obj.productId = Math.round(message.productId);
    }
    if (message.profileId !== 0) {
      obj.profileId = Math.round(message.profileId);
    }
    if (message.purchaseDate !== "") {
      obj.purchaseDate = message.purchaseDate;
    }
    if (message.expiryAt !== "") {
      obj.expiryAt = message.expiryAt;
    }
    if (message.serialCode !== "") {
      obj.serialCode = message.serialCode;
    }
    if (message.profile !== undefined) {
      obj.profile = Profile.toJSON(message.profile);
    }
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductRegistration>, I>>(base?: I): ProductRegistration {
    return ProductRegistration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductRegistration>, I>>(object: I): ProductRegistration {
    const message = createBaseProductRegistration();
    message.id = object.id ?? 0;
    message.productId = object.productId ?? 0;
    message.profileId = object.profileId ?? 0;
    message.purchaseDate = object.purchaseDate ?? "";
    message.expiryAt = object.expiryAt ?? "";
    message.serialCode = object.serialCode ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    return message;
  },
};

function createBaseProductRegistrationList(): ProductRegistrationList {
  return { productRegistrations: [] };
}

export const ProductRegistrationList: MessageFns<ProductRegistrationList> = {
  encode(message: ProductRegistrationList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.productRegistrations) {
      ProductRegistration.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductRegistrationList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductRegistrationList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productRegistrations.push(ProductRegistration.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductRegistrationList {
    return {
      productRegistrations: globalThis.Array.isArray(object?.productRegistrations)
        ? object.productRegistrations.map((e: any) => ProductRegistration.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductRegistrationList): unknown {
    const obj: any = {};
    if (message.productRegistrations?.length) {
      obj.productRegistrations = message.productRegistrations.map((e) => ProductRegistration.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductRegistrationList>, I>>(base?: I): ProductRegistrationList {
    return ProductRegistrationList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductRegistrationList>, I>>(object: I): ProductRegistrationList {
    const message = createBaseProductRegistrationList();
    message.productRegistrations = object.productRegistrations?.map((e) => ProductRegistration.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateProductRegistrationRequest(): CreateProductRegistrationRequest {
  return { profileId: 0, productId: 0, purchaseDate: "", expiryAt: "", serialCode: "" };
}

export const CreateProductRegistrationRequest: MessageFns<CreateProductRegistrationRequest> = {
  encode(message: CreateProductRegistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profileId !== 0) {
      writer.uint32(8).int32(message.profileId);
    }
    if (message.productId !== 0) {
      writer.uint32(16).int32(message.productId);
    }
    if (message.purchaseDate !== "") {
      writer.uint32(26).string(message.purchaseDate);
    }
    if (message.expiryAt !== "") {
      writer.uint32(34).string(message.expiryAt);
    }
    if (message.serialCode !== "") {
      writer.uint32(42).string(message.serialCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRegistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.profileId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.productId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.purchaseDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expiryAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.serialCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRegistrationRequest {
    return {
      profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : 0,
      productId: isSet(object.productId) ? globalThis.Number(object.productId) : 0,
      purchaseDate: isSet(object.purchaseDate) ? globalThis.String(object.purchaseDate) : "",
      expiryAt: isSet(object.expiryAt) ? globalThis.String(object.expiryAt) : "",
      serialCode: isSet(object.serialCode) ? globalThis.String(object.serialCode) : "",
    };
  },

  toJSON(message: CreateProductRegistrationRequest): unknown {
    const obj: any = {};
    if (message.profileId !== 0) {
      obj.profileId = Math.round(message.profileId);
    }
    if (message.productId !== 0) {
      obj.productId = Math.round(message.productId);
    }
    if (message.purchaseDate !== "") {
      obj.purchaseDate = message.purchaseDate;
    }
    if (message.expiryAt !== "") {
      obj.expiryAt = message.expiryAt;
    }
    if (message.serialCode !== "") {
      obj.serialCode = message.serialCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductRegistrationRequest>, I>>(
    base?: I,
  ): CreateProductRegistrationRequest {
    return CreateProductRegistrationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductRegistrationRequest>, I>>(
    object: I,
  ): CreateProductRegistrationRequest {
    const message = createBaseCreateProductRegistrationRequest();
    message.profileId = object.profileId ?? 0;
    message.productId = object.productId ?? 0;
    message.purchaseDate = object.purchaseDate ?? "";
    message.expiryAt = object.expiryAt ?? "";
    message.serialCode = object.serialCode ?? "";
    return message;
  },
};

function createBaseUpdateProductRegistrationRequest(): UpdateProductRegistrationRequest {
  return { id: 0, purchaseDate: "", expiryAt: "", serialCode: "" };
}

export const UpdateProductRegistrationRequest: MessageFns<UpdateProductRegistrationRequest> = {
  encode(message: UpdateProductRegistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.purchaseDate !== "") {
      writer.uint32(18).string(message.purchaseDate);
    }
    if (message.expiryAt !== "") {
      writer.uint32(26).string(message.expiryAt);
    }
    if (message.serialCode !== "") {
      writer.uint32(34).string(message.serialCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductRegistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.purchaseDate = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expiryAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.serialCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductRegistrationRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      purchaseDate: isSet(object.purchaseDate) ? globalThis.String(object.purchaseDate) : "",
      expiryAt: isSet(object.expiryAt) ? globalThis.String(object.expiryAt) : "",
      serialCode: isSet(object.serialCode) ? globalThis.String(object.serialCode) : "",
    };
  },

  toJSON(message: UpdateProductRegistrationRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.purchaseDate !== "") {
      obj.purchaseDate = message.purchaseDate;
    }
    if (message.expiryAt !== "") {
      obj.expiryAt = message.expiryAt;
    }
    if (message.serialCode !== "") {
      obj.serialCode = message.serialCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProductRegistrationRequest>, I>>(
    base?: I,
  ): UpdateProductRegistrationRequest {
    return UpdateProductRegistrationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProductRegistrationRequest>, I>>(
    object: I,
  ): UpdateProductRegistrationRequest {
    const message = createBaseUpdateProductRegistrationRequest();
    message.id = object.id ?? 0;
    message.purchaseDate = object.purchaseDate ?? "";
    message.expiryAt = object.expiryAt ?? "";
    message.serialCode = object.serialCode ?? "";
    return message;
  },
};

function createBaseProductRegistrationByIdRequest(): ProductRegistrationByIdRequest {
  return { id: 0, profileId: undefined };
}

export const ProductRegistrationByIdRequest: MessageFns<ProductRegistrationByIdRequest> = {
  encode(message: ProductRegistrationByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.profileId !== undefined) {
      writer.uint32(16).int32(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductRegistrationByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductRegistrationByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.profileId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductRegistrationByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : undefined,
    };
  },

  toJSON(message: ProductRegistrationByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.profileId !== undefined) {
      obj.profileId = Math.round(message.profileId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductRegistrationByIdRequest>, I>>(base?: I): ProductRegistrationByIdRequest {
    return ProductRegistrationByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductRegistrationByIdRequest>, I>>(
    object: I,
  ): ProductRegistrationByIdRequest {
    const message = createBaseProductRegistrationByIdRequest();
    message.id = object.id ?? 0;
    message.profileId = object.profileId ?? undefined;
    return message;
  },
};

function createBaseProductRegistrationByProfileRequest(): ProductRegistrationByProfileRequest {
  return { profileId: 0 };
}

export const ProductRegistrationByProfileRequest: MessageFns<ProductRegistrationByProfileRequest> = {
  encode(message: ProductRegistrationByProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profileId !== 0) {
      writer.uint32(8).int32(message.profileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductRegistrationByProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductRegistrationByProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.profileId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductRegistrationByProfileRequest {
    return { profileId: isSet(object.profileId) ? globalThis.Number(object.profileId) : 0 };
  },

  toJSON(message: ProductRegistrationByProfileRequest): unknown {
    const obj: any = {};
    if (message.profileId !== 0) {
      obj.profileId = Math.round(message.profileId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductRegistrationByProfileRequest>, I>>(
    base?: I,
  ): ProductRegistrationByProfileRequest {
    return ProductRegistrationByProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductRegistrationByProfileRequest>, I>>(
    object: I,
  ): ProductRegistrationByProfileRequest {
    const message = createBaseProductRegistrationByProfileRequest();
    message.profileId = object.profileId ?? 0;
    return message;
  },
};

function createBaseCreateProductBundleRequest(): CreateProductBundleRequest {
  return { mainProductId: 0, bundledProductId: 0 };
}

export const CreateProductBundleRequest: MessageFns<CreateProductBundleRequest> = {
  encode(message: CreateProductBundleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mainProductId !== 0) {
      writer.uint32(8).int32(message.mainProductId);
    }
    if (message.bundledProductId !== 0) {
      writer.uint32(16).int32(message.bundledProductId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductBundleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductBundleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mainProductId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.bundledProductId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductBundleRequest {
    return {
      mainProductId: isSet(object.mainProductId) ? globalThis.Number(object.mainProductId) : 0,
      bundledProductId: isSet(object.bundledProductId) ? globalThis.Number(object.bundledProductId) : 0,
    };
  },

  toJSON(message: CreateProductBundleRequest): unknown {
    const obj: any = {};
    if (message.mainProductId !== 0) {
      obj.mainProductId = Math.round(message.mainProductId);
    }
    if (message.bundledProductId !== 0) {
      obj.bundledProductId = Math.round(message.bundledProductId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductBundleRequest>, I>>(base?: I): CreateProductBundleRequest {
    return CreateProductBundleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductBundleRequest>, I>>(object: I): CreateProductBundleRequest {
    const message = createBaseCreateProductBundleRequest();
    message.mainProductId = object.mainProductId ?? 0;
    message.bundledProductId = object.bundledProductId ?? 0;
    return message;
  },
};

function createBaseUpdateProductBundleRequest(): UpdateProductBundleRequest {
  return { id: 0, mainProductId: 0, bundledProductId: 0 };
}

export const UpdateProductBundleRequest: MessageFns<UpdateProductBundleRequest> = {
  encode(message: UpdateProductBundleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.mainProductId !== 0) {
      writer.uint32(16).int32(message.mainProductId);
    }
    if (message.bundledProductId !== 0) {
      writer.uint32(24).int32(message.bundledProductId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductBundleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductBundleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mainProductId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.bundledProductId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductBundleRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      mainProductId: isSet(object.mainProductId) ? globalThis.Number(object.mainProductId) : 0,
      bundledProductId: isSet(object.bundledProductId) ? globalThis.Number(object.bundledProductId) : 0,
    };
  },

  toJSON(message: UpdateProductBundleRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.mainProductId !== 0) {
      obj.mainProductId = Math.round(message.mainProductId);
    }
    if (message.bundledProductId !== 0) {
      obj.bundledProductId = Math.round(message.bundledProductId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProductBundleRequest>, I>>(base?: I): UpdateProductBundleRequest {
    return UpdateProductBundleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProductBundleRequest>, I>>(object: I): UpdateProductBundleRequest {
    const message = createBaseUpdateProductBundleRequest();
    message.id = object.id ?? 0;
    message.mainProductId = object.mainProductId ?? 0;
    message.bundledProductId = object.bundledProductId ?? 0;
    return message;
  },
};

function createBaseFindProductBundleByIdRequest(): FindProductBundleByIdRequest {
  return { id: 0 };
}

export const FindProductBundleByIdRequest: MessageFns<FindProductBundleByIdRequest> = {
  encode(message: FindProductBundleByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindProductBundleByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindProductBundleByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindProductBundleByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: FindProductBundleByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindProductBundleByIdRequest>, I>>(base?: I): FindProductBundleByIdRequest {
    return FindProductBundleByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindProductBundleByIdRequest>, I>>(object: I): FindProductBundleByIdRequest {
    const message = createBaseFindProductBundleByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRemoveProductBundleRequest(): RemoveProductBundleRequest {
  return { id: 0 };
}

export const RemoveProductBundleRequest: MessageFns<RemoveProductBundleRequest> = {
  encode(message: RemoveProductBundleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductBundleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductBundleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProductBundleRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: RemoveProductBundleRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProductBundleRequest>, I>>(base?: I): RemoveProductBundleRequest {
    return RemoveProductBundleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProductBundleRequest>, I>>(object: I): RemoveProductBundleRequest {
    const message = createBaseRemoveProductBundleRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseProductBundleResponse(): ProductBundleResponse {
  return { id: 0, mainProductId: 0, bundledProductId: 0 };
}

export const ProductBundleResponse: MessageFns<ProductBundleResponse> = {
  encode(message: ProductBundleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.mainProductId !== 0) {
      writer.uint32(16).int32(message.mainProductId);
    }
    if (message.bundledProductId !== 0) {
      writer.uint32(24).int32(message.bundledProductId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductBundleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductBundleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mainProductId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.bundledProductId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductBundleResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      mainProductId: isSet(object.mainProductId) ? globalThis.Number(object.mainProductId) : 0,
      bundledProductId: isSet(object.bundledProductId) ? globalThis.Number(object.bundledProductId) : 0,
    };
  },

  toJSON(message: ProductBundleResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.mainProductId !== 0) {
      obj.mainProductId = Math.round(message.mainProductId);
    }
    if (message.bundledProductId !== 0) {
      obj.bundledProductId = Math.round(message.bundledProductId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductBundleResponse>, I>>(base?: I): ProductBundleResponse {
    return ProductBundleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductBundleResponse>, I>>(object: I): ProductBundleResponse {
    const message = createBaseProductBundleResponse();
    message.id = object.id ?? 0;
    message.mainProductId = object.mainProductId ?? 0;
    message.bundledProductId = object.bundledProductId ?? 0;
    return message;
  },
};

function createBaseProductBundlesList(): ProductBundlesList {
  return { bundles: [] };
}

export const ProductBundlesList: MessageFns<ProductBundlesList> = {
  encode(message: ProductBundlesList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bundles) {
      ProductBundleResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductBundlesList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductBundlesList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bundles.push(ProductBundleResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductBundlesList {
    return {
      bundles: globalThis.Array.isArray(object?.bundles)
        ? object.bundles.map((e: any) => ProductBundleResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProductBundlesList): unknown {
    const obj: any = {};
    if (message.bundles?.length) {
      obj.bundles = message.bundles.map((e) => ProductBundleResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductBundlesList>, I>>(base?: I): ProductBundlesList {
    return ProductBundlesList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductBundlesList>, I>>(object: I): ProductBundlesList {
    const message = createBaseProductBundlesList();
    message.bundles = object.bundles?.map((e) => ProductBundleResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateProductRequest(): CreateProductRequest {
  return { SKU: "", name: "" };
}

export const CreateProductRequest: MessageFns<CreateProductRequest> = {
  encode(message: CreateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.SKU !== "") {
      writer.uint32(10).string(message.SKU);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.SKU = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRequest {
    return {
      SKU: isSet(object.SKU) ? globalThis.String(object.SKU) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: CreateProductRequest): unknown {
    const obj: any = {};
    if (message.SKU !== "") {
      obj.SKU = message.SKU;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductRequest>, I>>(base?: I): CreateProductRequest {
    return CreateProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductRequest>, I>>(object: I): CreateProductRequest {
    const message = createBaseCreateProductRequest();
    message.SKU = object.SKU ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateProductRequest(): UpdateProductRequest {
  return { id: 0, SKU: "", name: "" };
}

export const UpdateProductRequest: MessageFns<UpdateProductRequest> = {
  encode(message: UpdateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.SKU !== "") {
      writer.uint32(18).string(message.SKU);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.SKU = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      SKU: isSet(object.SKU) ? globalThis.String(object.SKU) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: UpdateProductRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.SKU !== "") {
      obj.SKU = message.SKU;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProductRequest>, I>>(base?: I): UpdateProductRequest {
    return UpdateProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProductRequest>, I>>(object: I): UpdateProductRequest {
    const message = createBaseUpdateProductRequest();
    message.id = object.id ?? 0;
    message.SKU = object.SKU ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseFindProductByIdRequest(): FindProductByIdRequest {
  return { id: 0 };
}

export const FindProductByIdRequest: MessageFns<FindProductByIdRequest> = {
  encode(message: FindProductByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindProductByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindProductByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindProductByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: FindProductByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindProductByIdRequest>, I>>(base?: I): FindProductByIdRequest {
    return FindProductByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindProductByIdRequest>, I>>(object: I): FindProductByIdRequest {
    const message = createBaseFindProductByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRemoveProductRequest(): RemoveProductRequest {
  return { id: 0 };
}

export const RemoveProductRequest: MessageFns<RemoveProductRequest> = {
  encode(message: RemoveProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProductRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: RemoveProductRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveProductRequest>, I>>(base?: I): RemoveProductRequest {
    return RemoveProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveProductRequest>, I>>(object: I): RemoveProductRequest {
    const message = createBaseRemoveProductRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseProduct(): Product {
  return { id: 0, SKU: "", name: "" };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.SKU !== "") {
      writer.uint32(18).string(message.SKU);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.SKU = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      SKU: isSet(object.SKU) ? globalThis.String(object.SKU) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.SKU !== "") {
      obj.SKU = message.SKU;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = object.id ?? 0;
    message.SKU = object.SKU ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseProductsList(): ProductsList {
  return { products: [] };
}

export const ProductsList: MessageFns<ProductsList> = {
  encode(message: ProductsList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductsList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductsList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductsList {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProductsList): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductsList>, I>>(base?: I): ProductsList {
    return ProductsList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductsList>, I>>(object: I): ProductsList {
    const message = createBaseProductsList();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

/**
 * ---------------
 * in_music_api.ProfileService
 * ---------------
 */
export interface ProfilesService {
  CreateProfile(request: CreateProfileRequest): Promise<Profile>;
  GetProfiles(request: Empty): Promise<ProfilesList>;
  GetProfile(request: ProfileByIdRequest): Promise<Profile>;
  UpdateProfile(request: UpdateProfileRequest): Promise<Profile>;
  DeleteProfile(request: ProfileByIdRequest): Promise<Empty>;
}

/**
 * ---------------------------------------
 * in_music_api.ProductRegistrationsService
 * ---------------------------------------
 */
export interface ProductRegistrationsService {
  CreateProductRegistration(request: CreateProductRegistrationRequest): Promise<ProductRegistration>;
  GetProductRegistrations(request: Empty): Promise<ProductRegistrationList>;
  GetAllProductRegistrations(request: Empty): Promise<ProductRegistrationList>;
  GetProductRegistration(request: ProductRegistrationByIdRequest): Promise<ProductRegistration>;
  GetProductRegistrationsByProfile(request: ProductRegistrationByProfileRequest): Promise<ProductRegistrationList>;
  UpdateProductRegistration(request: UpdateProductRegistrationRequest): Promise<ProductRegistration>;
  DeleteProductRegistration(request: ProductRegistrationByIdRequest): Promise<Empty>;
}

/**
 * ---------------------------------
 * in_music_api.ProductBundleService
 * ---------------------------------
 */
export interface ProductBundleService {
  CreateProductBundle(request: CreateProductBundleRequest): Promise<ProductBundleResponse>;
  FindAllProductBundles(request: Empty): Promise<ProductBundlesList>;
  FindProductBundleById(request: FindProductBundleByIdRequest): Promise<ProductBundleResponse>;
  UpdateProductBundle(request: UpdateProductBundleRequest): Promise<ProductBundleResponse>;
  RemoveProductBundle(request: RemoveProductBundleRequest): Promise<Empty>;
}

/**
 * ---------------------------
 * in_music_api.ProductService
 * ---------------------------
 */
export interface ProductService {
  CreateProduct(request: CreateProductRequest): Promise<Product>;
  FindAllProducts(request: Empty): Promise<ProductsList>;
  FindProductById(request: FindProductByIdRequest): Promise<Product>;
  UpdateProduct(request: UpdateProductRequest): Promise<Product>;
  RemoveProduct(request: RemoveProductRequest): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
